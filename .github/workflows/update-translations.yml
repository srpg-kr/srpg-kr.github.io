name: Update Translations from Accepted Issues

on:
  workflow_dispatch:

jobs:
  update-translations:
    runs-on: ubuntu-latest
    permissions:
      contents: write        # commit to the repo
      issues: write          # relabel / close issues

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Install action dependencies
        run: npm install @octokit/rest

      # --------------------------------------------------------------------
      # 1️⃣  Collect all “translation‑accepted” issues and update JSON
      # --------------------------------------------------------------------
      - name: Fetch and process accepted issues
        id: process_issues
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          node <<'NODE'
          const { Octokit } = require('@octokit/rest');
          const fs   = require('fs');
          const path = require('path');

          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          const owner   = 'srpg-kr';
          const repo    = 'srpg-kr.github.io';

          (async () => {
            const issues = await octokit.paginate(
              octokit.rest.issues.listForRepo,
              { owner, repo, state: 'open', labels: 'accepted', per_page: 100 }
            );

            const translationsPath = path.join(process.env.GITHUB_WORKSPACE, 'public', 'translation_data.json');
            const translations = fs.existsSync(translationsPath)
              ? JSON.parse(fs.readFileSync(translationsPath, 'utf8').replace(/^\uFEFF/, ''))
              : {};

            const processed = [];

            for (const issue of issues) {
              const body = issue.body || '';

              // pull CN and KR text from fenced blocks
              const cn = (body.match(/\*\*Original Text \(CN\):\*\*\s*\n```([\s\S]*?)```/) || [])[1]?.trim();
              const kr = (body.match(/\*\*Suggested Translation \(KR\):\*\*\s*\n```([\s\S]*?)```/) || [])[1]?.trim().replaceAll('\\n', '\n');

              if (cn && kr) {
                translations[cn] = kr;
                processed.push(issue.number);
                console.log(`✓ ${issue.number} → added/updated translation`);
              }
            }

            if (processed.length) {
              fs.writeFileSync(translationsPath, JSON.stringify(translations, null, 4));
              console.log('translation_data.json written');

              // expose processed issue numbers to later steps
              fs.appendFileSync(process.env.GITHUB_OUTPUT,
                `issues_to_patch=${JSON.stringify(processed)}\n`);
            } else {
              console.log('No matching issues found');
              fs.appendFileSync(process.env.GITHUB_OUTPUT, 'issues_to_patch=[]\n');
            }
          })().catch(err => { console.error(err); process.exit(1); });
          NODE

      # --------------------------------------------------------------------
      # 2️⃣  Commit the updated JSON file (if anything changed)
      # --------------------------------------------------------------------
      - name: Commit updated translation_data.json
        if: steps.process_issues.outputs.issues_to_patch != '[]'
        run: |
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add public/translation_data.json
          git commit -m "chore: apply accepted translation suggestions" || echo "Nothing to commit"
          git push

      # --------------------------------------------------------------------
      # 3️⃣  Relabel and close processed issues
      # --------------------------------------------------------------------
      - name: Relabel & close issues
        if: steps.process_issues.outputs.issues_to_patch != '[]'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          OWNER: srpg-kr
          REPO:  srpg-kr.github.io
          ISSUE_LIST: ${{ steps.process_issues.outputs.issues_to_patch }}
        run: |
          node <<'NODE'
          const { Octokit } = require('@octokit/rest');
          const octokit = new Octokit({ auth: process.env.GITHUB_TOKEN });
          const owner = process.env.OWNER;
          const repo  = process.env.REPO;
          const nums  = JSON.parse(process.env.ISSUE_LIST);

          (async () => {
            for (const number of nums) {
              await octokit.rest.issues.removeLabel({ owner, repo, issue_number: number, name: 'accepted' })
                .catch(() => {});               // ignore if label already gone
              await octokit.rest.issues.addLabels({ owner, repo, issue_number: number, labels: ['patched'] });
              await octokit.rest.issues.update({ owner, repo, issue_number: number, state: 'closed' });
              console.log(`✓ #${number} patched & closed`);
            }
          })().catch(err => { console.error(err); process.exit(1); });
          NODE
